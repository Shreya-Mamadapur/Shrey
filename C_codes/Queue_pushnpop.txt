/*
* queue.c
*
* a simple, non-pointer queue implementation for the storage of integers
*
*
* Created on: Jun. 14, 2020
* Author: Shreya
* Adapted from: Takis (stack.c)
*/
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#define L 1024 // size of integer data structure
/************************
* GLOBAL VARIABLES
************************
*/
int q[L]; // Queue storage
long q_tail = -1; // the Q tail, it increases as data is put in the q
long q_head = -1; // the Q head, it increases as data is removed from the q
/*
***********************
* FUNCTIONS
************************
*/
/*
* Queue_empty(s) implementation
*/
bool queue_empty(void)
{
bool result;
if (q_tail == q_head)//When Q is empty location of head == loc of tail
{
result = true;
}
else
{
result = false;
}
return result;
}
/*
* Queue implementation
*/
void queue(int x)
{
q[++q_tail] = x;
if(q_tail >= L)//Q grows over the size of the array
{
printf("Queue Overflow");
}
return;
}
/*
* dequeue implementation
*/
int dequeue(void)
{
if (queue_empty())
{
printf("underflow error\n");
exit(EXIT_FAILURE);
}
else
{
return q[++q_head];
}
}

/************************
* MAIN CODE
************************
*/
int main()
{
int loadarr[] = { 52, -29, 36, -821, 790, -650, 1125, 72, 0, 68, 33, 59 };
size_t N = sizeof(loadarr) / sizeof(int);
/* print out contents of array*/
printf("data to be loaded on to the stack:\n");
for (size_t i = 0; i != N; ++i)
{
printf("%d ", loadarr[i]);
}
printf("\n");
/* load Q */
printf("Put data onto Q...\n");
for (size_t i = 0; i != N; ++i)
{
queue(loadarr[i]);
}
/* Deque */
printf("Dequeing the queue...\n");
while (queue_empty() == false)
{
printf("%d ", dequeue());
}
// exit normally
return EXIT_SUCCESS;
}
